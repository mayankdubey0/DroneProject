#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <Wire.h>
#include <Servo.h>
#include "ppm.h"

#define THROTTLE        2
#define ROLL            3
#define PITCH           4
#define YAW             1
#define SWITCH3WAY_1    5
#define BUTTON          6
#define SWITCH          7
#define POT             8 

const long interval = 50;
unsigned long previousMillis = 0;

bool callib = true;

Servo ESC1;
Servo ESC2;
Servo ESC3;
Servo ESC4;

float xG;
float yG;
float zG;

//Accelerometer callibration variables
float acc_biasX;
float acc_biasY;
float acc_biasZ;

bool cal = true;

float motor1 = 0;
float motor2 = 0;
float motor3 = 0;
float motor4 = 0;

float data[6];

float time1 = millis()/1000;
float time2 = 0;
float elapsed_time = 0;

float integralX = 0;
float integralY = 0;

float target_x = 0;
float target_y = 0;

float errorX;
float errorY;

float prev_errorX = 0;
float prev_errorY = 0;

bool joy_up = false;
bool joy_down = false;

Adafruit_MPU6050 mpu;

void setup() {
  Serial.begin(19200);

  short throttle      =   ppm.read_channel(THROTTLE);
  short roll          =   ppm.read_channel(ROLL);
  short pitch         =   ppm.read_channel(PITCH);
  short yaw           =   ppm.read_channel(YAW);

  // Try to initialize!
  if (!mpu.begin()) {
    Serial.println("Failed to find MPU6050 chip");
    while (1) {
      delay(10);
    }
  }
  Serial.println("MPU6050 Found!");
  delay(100);

  ppm.begin(A0, false);

  ESC1.attach(9, 1000, 2000);
  ESC2.attach(5, 1000, 2000);
  ESC3.attach(11, 1000, 2000);
  ESC4.attach(10, 1000, 2000);


  short swtch = ppm.read_channel(SWITCH);
  if(swtch>1500){
    ESC1.write(2000);
    ESC2.write(2000);
    ESC3.write(2000);
    ESC4.write(2000);
  }
}


void loop() {

  short swtch = ppm.read_channel(SWITCH);

  if(swtch>1500){

    if(!joy_up || !joy_down){
      short throttle      =   ppm.read_channel(THROTTLE);
      Serial.print(joy_up);
      Serial.print(" / ");
      Serial.println(joy_down);

      if(throttle > 1900 && !joy_up){

        joy_up = true;

        ESC1.write(2000);
        ESC2.write(2000);
        ESC3.write(2000);
        ESC4.write(2000);
      }

      if(throttle < 1100 && joy_up){

        joy_down = true;

        ESC1.write(1500);
        ESC2.write(1500);
        ESC3.write(1500);
        ESC4.write(1500);
      }
    }

    else{
      unsigned long currentMillis = millis();
      if (currentMillis - previousMillis >= interval) {
        previousMillis = currentMillis;

        // Acquiring all the channels values
        short throttle      =   ppm.read_channel(THROTTLE);
        short roll          =   ppm.read_channel(ROLL);
        short pitch         =   ppm.read_channel(PITCH);
        short yaw           =   ppm.read_channel(YAW);
        short swtch         =   ppm.read_channel(SWITCH);

        /* Get new sensor events with the readings */
        sensors_event_t a, g, temp;
        mpu.getEvent(&a, &g, &temp);

        callibrate_acc(a, g, temp);

        data[0] = a.acceleration.x - acc_biasX;
        data[1] = a.acceleration.y - acc_biasY;
        data[2] = a.acceleration.z - acc_biasZ;

        time2 = millis();
        elapsed_time = time2 - time1;

        errorX = (target_x - asin(data[0]/9.81))*5;
        errorY = (target_y - asin(data[1]/9.81))*5;

        motor1 = throttle + PID(1, 3, 1, errorX, prev_errorX, elapsed_time, integralX)-500;
        motor2 = throttle - PID(1, 3, 1, errorX, prev_errorX, elapsed_time, integralX)-500;
        motor3 = throttle + PID(1, 3, 1, errorY, prev_errorY, elapsed_time, integralY)-500;
        motor4 = throttle - PID(1, 3, 1, errorY, prev_errorY, elapsed_time, integralY)-500;

        time1 = time2;
        prev_errorX = errorX;
        prev_errorY = errorY;

        //Serial.println(swtch);
        if(motor1>900 && motor2>900 && motor3>900 && motor4>900){
          Serial.print(motor1);
          Serial.print(" / ");
          Serial.print(motor2);
          Serial.print(" / ");
          Serial.print(motor3);
          Serial.print(" / ");
          Serial.println(motor4);

          ESC1.write(motor1);
          ESC2.write(motor2);
          ESC3.write(motor3);
          ESC4.write(motor4);

        }
        else{
          ESC1.write(1000);
          ESC2.write(1000);
          ESC3.write(1000);
          ESC4.write(1000);
        }


      }
    }
  }
}




//############### HELPER FUNCTIONS #############
void callibrate_acc(sensors_event_t a, sensors_event_t g, sensors_event_t temp){
  mpu.getEvent(&a, &g, &temp);
  if(cal){
    acc_biasX = a.acceleration.x;
    acc_biasY = a.acceleration.y;
    acc_biasZ = a.acceleration.z - 9.81;
    cal = false;
    Serial.println("DONE CALLIBRATING!");
  }
}


float get_angle(float z){
  float angle;
  if(z<=9.81){
    angle = acos(z/9.81);
  }
  else{
    angle = 0;
  }
  return angle;
}


float rad2deg(float rad){
  return rad*(180/3.14);
}

float PID(float K1, float K2, float K3, float error, float prev_error, float time, float integral){
  integral += error * time;
  float change = K1 * error + K2 * (error - prev_error)/time + K3 * integral;
  return change;
}
