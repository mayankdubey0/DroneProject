classdef Drone
    properties
        com
        angle
        a
        b
        c
        rot
        m1
        m2
        m3
        m4
    end
    
    methods
        function obj = Drone(center, rpy)
            % Constructon
            obj.com = center; % x, y, z
            obj.angle = rpy; % roll, pitch, yaw a, b c
            obj.a = rpy(1);
            obj.b = rpy(2);
            obj.c = rpy(3);
            obj.rot = [cos(obj.b)*cos(obj.c), sin(obj.a)*sin(obj.b)*cos(obj.c) - cos(obj.a)*sin(obj.c), cos(obj.a)*sin(obj.b)*cos(obj.c) + sin(obj.a)*sin(obj.c);
                            cos(obj.b)*sin(obj.c), sin(obj.a)*sin(obj.b)*sin(obj.c) + cos(obj.a)*cos(obj.c), cos(obj.a)*sin(obj.b)*sin(obj.c) - sin(obj.a)*cos(obj.c);
                            -sin(obj.b), sin(obj.a)*cos(obj.b), cos(obj.a)*cos(obj.b)];
            obj.m1 = obj.rot*[0; 0.5; 0];
            obj.m2 = obj.rot*[0; -0.5; 0];
            obj.m3 = obj.rot*[0.5; 0; 0];
            obj.m4 = obj.rot*[0; -0.5; 0];
        end
        

        function show_drone(obj)
            figure;
            plot3([obj.m1(1), obj.m2(1)], [obj.m1(2), obj.m2(2)], [obj.m1(3), obj.m2(3)], 'LineWidth', 2);
            hold on;  % This keeps the current plot and adds the new one
            plot3([obj.m3(1), obj.m4(1)], [obj.m3(2), obj.m4(2)], [obj.m3(3), obj.m4(3)], 'LineWidth', 2);  % Adjust 'LineWidth' as needed
            hold off;  % This releases the hold on the current plot
            
            grid on;
            xlabel('X-axis');
            ylabel('Y-axis');
            zlabel('Z-axis');
            title('Two 3D Line Segments');
        end


        function displayProperties(obj)
            % Display properties
             disp(['Center: ', num2str(obj.com)]);
            disp(['RPY: ', num2str(obj.angle)]);
        end
    end
end

x1 = [0, 0, 0];
droneTest = Drone(x1, [0, 0, 0]);
droneTest.show_drone();

